/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package amer.tm.ilp;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//amer.tm.ilp//ilp//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ilpTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "amer.tm.ilp.ilpTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ilpAction",
        preferredID = "ilpTopComponent"
)
@Messages({
    "CTL_ilpAction=ilp",
    "CTL_ilpTopComponent=ilp Window",
    "HINT_ilpTopComponent=This is a ilp window"
})
public final class ilpTopComponent extends TopComponent implements PropertyChangeListener {

    public ilpTopComponent() {
        initComponents();
        setName(Bundle.CTL_ilpTopComponent());
        setToolTipText(Bundle.HINT_ilpTopComponent());
        enableBtn();
        btnStart.setEnabled(false);
        proBar.setVisible(false);
    }

    private void disableBtn() {
        btnSelInput.setEnabled(false);
        btnSelOutput.setEnabled(false);
        btnStart.setEnabled(false);
        btnStop.setEnabled(true);
    }

    private void enableBtn() {
        btnSelInput.setEnabled(true);
        btnSelOutput.setEnabled(true);
        btnStart.setEnabled(true);
        btnStop.setEnabled(false);
    }

    private void checkInputs() {

        if (!txtInput.getText().equals("Select input folder") && !txtOutput.getText().equals("Select output folder")) {
            btnStart.setEnabled(true);
        } else {
            btnStart.setEnabled(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField();
        btnSelInput = new javax.swing.JButton();
        txtOutput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnSelOutput = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInFiles = new javax.swing.JTextArea();
        proBar = new javax.swing.JProgressBar();
        btnStop = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtSender = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.jLabel1.text")); // NOI18N

        txtInput.setEditable(false);
        txtInput.setText(org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.txtInput.text")); // NOI18N
        txtInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtInputMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnSelInput, org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.btnSelInput.text")); // NOI18N
        btnSelInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelInputActionPerformed(evt);
            }
        });

        txtOutput.setEditable(false);
        txtOutput.setText(org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.txtOutput.text")); // NOI18N
        txtOutput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOutputMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnSelOutput, org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.btnSelOutput.text")); // NOI18N
        btnSelOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelOutputActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.jPanel1.border.title"))); // NOI18N

        txtInFiles.setEditable(false);
        txtInFiles.setColumns(20);
        txtInFiles.setRows(5);
        jScrollPane1.setViewportView(txtInFiles);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(btnStop, org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.btnStop.text")); // NOI18N
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnStart, org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.btnStart.text")); // NOI18N
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.jPanel3.border.title"))); // NOI18N

        jTable1.setModel(sm);
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.jLabel3.text")); // NOI18N

        txtSender.setText(org.openide.util.NbBundle.getMessage(ilpTopComponent.class, "ilpTopComponent.txtSender.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtOutput)
                                    .addComponent(txtInput))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSelInput, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSelOutput, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSender, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(proBar, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStop))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelOutput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnStop)
                                .addComponent(btnStart))
                            .addComponent(proBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelInputActionPerformed
        // TODO add your handling code here:
        txtInFiles.setText("");
        txtInput.setText("Select input folder");

        JFileChooser fc = new JFileChooser(".");
        fc.setDialogTitle("Select input folder");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            txtInput.setText(file.getAbsolutePath());
            inputfiles = new ArrayList<>();

            // list the folder content
            File[] flist = file.listFiles();
            String nom = "";

            for (File ff : flist) {
                if (ff.isFile() && ff.getName().endsWith(".s")) {
                    inputfiles.add(ff);
                    nom += ff.getName() + "\n";

                }
            }

            txtInFiles.setText(nom);
        }

        checkInputs();

    }//GEN-LAST:event_btnSelInputActionPerformed

    private void txtInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtInputMouseClicked
        // TODO add your handling code here:
        btnSelInputActionPerformed(null);
    }//GEN-LAST:event_txtInputMouseClicked

    private void btnSelOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelOutputActionPerformed
        // TODO add your handling code here:
        txtOutput.setText("Select output folder");

        JFileChooser fc = new JFileChooser(".");
        fc.setDialogTitle("Select output folder");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            outputdir = fc.getSelectedFile();
            txtOutput.setText(outputdir.getAbsolutePath());

        }

        checkInputs();

    }//GEN-LAST:event_btnSelOutputActionPerformed

    private void txtOutputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOutputMouseClicked
        // TODO add your handling code here:
        btnSelOutputActionPerformed(null);
    }//GEN-LAST:event_txtOutputMouseClicked

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
        stopPressed = true;
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        stopPressed = false;

        processWorker pw = new processWorker();
        pw.addPropertyChangeListener(this);
        pw.execute();
    }//GEN-LAST:event_btnStartActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSelInput;
    private javax.swing.JButton btnSelOutput;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JProgressBar proBar;
    private javax.swing.JTextArea txtInFiles;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextField txtOutput;
    private javax.swing.JTextField txtSender;
    // End of variables declaration//GEN-END:variables

    private ArrayList<File> inputfiles;
    private File outputdir;
    private SummaryModel sm = new SummaryModel();
    private boolean stopPressed;

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {

    }

    class processWorker extends SwingWorker<Void, Void> {

        int recordcount = 0;

        @Override
        protected Void doInBackground() throws Exception {
            String expectedsender = txtSender.getText().toLowerCase();
            proBar.setVisible(true);
            disableBtn();
            proBar.setIndeterminate(true);

            CommonHelper.log("start", false);
            countentry();
            CommonHelper.log("done line count: " + recordcount, false);
            proBar.setVisible(false);

            // prep the writer
            BufferedWriter writer;
            String ts = CommonHelper.tsToDateNow("yyyyMMdd_HHmmss");
            File outf = new File(outputdir, "bounce_ebill_" + ts + ".csv");
            try {
                writer = new BufferedWriter(new FileWriter(outf));
                writer.write("account_no;err_type;email;time;full_err");
                writer.newLine();
            } catch (IOException e) {
                CommonHelper.logStack(e);
                enableBtn();
                return null;
            }

            proBar = new JProgressBar(1, recordcount);
            proBar.setStringPainted(true);

            // prep the table
            ArrayList<String> type = new ArrayList<>();
            ArrayList<Integer> count = new ArrayList<>();

            int counter = 0;
            for (File f : inputfiles) {
                CommonHelper.log("Processing " + f.getName(), false);
                try {
                    Scanner sc = new Scanner(f);
                    while (sc.hasNextLine()) {
                        if (stopPressed) {
                            break;
                        }
                        counter++;
                        proBar.setValue(counter);
                        String line = sc.nextLine();
                        LogLineProcessor llp = new LogLineProcessor(line, expectedsender);

                        if (llp.process()) {
                            try {
                                if (llp.mappederr.equals("Others")) {
                                    writer.write(
                                            llp.bano + ";"
                                            + llp.mappederr + ";"
                                            + llp.email + ";"
                                            + llp.time + ";"
                                            + llp.fullerr
                                    );

                                } else {
                                    writer.write(
                                            llp.bano + ";"
                                            + llp.mappederr + ";"
                                            + llp.email + ";"
                                            + llp.time + ";"
                                    );
                                }
                                writer.newLine();
                            } catch (Exception e) {
                                CommonHelper.log("Error writing to file: " + outf.getName(), true);
                                CommonHelper.logStack(e);
                                stopPressed = true;
                                break;
                            }

//                            CommonHelper.log(llp.time, false);
//                            CommonHelper.log(llp.email, false);
//                            CommonHelper.log(llp.errtype + "<", false);
//                            CommonHelper.log(llp.bano, false);
//                            CommonHelper.log("===============", false);
                            int idx = type.indexOf(llp.mappederr);
                            if (idx == -1) {
                                type.add(llp.mappederr);
                                count.add(1);
                            } else {
                                int x = count.get(idx);
                                count.set(idx, x + 1);
                            }

                        }

                        if (counter % 50 == 0) {
                            sm.setData(type, count);
                        }
                    }

                    sc.close();

                } catch (FileNotFoundException e) {
                    CommonHelper.log("Error reading input file: " + f.getName(), true);
                    CommonHelper.logStack(e);
                }
                if (stopPressed) {
                    break;
                }

            }

            sm.setData(type, count);

            // flush the output
            try {
                writer.close();
            } catch (IOException e) {
                CommonHelper.log("Error closing output file", true);
                CommonHelper.logStack(e);
            }
            proBar.setIndeterminate(true);
            proBar.setVisible(false);
            enableBtn();
            CommonHelper.log("process completed", false);

            return null;
        }

        private void countentry() {
            for (File f : inputfiles) {
                Path p = Paths.get(f.getAbsolutePath());
                try {
                    recordcount += Files.lines(p).count();
                } catch (IOException e) {
                    CommonHelper.logStack(e);
                }
            }
        }

    }
}
